definitions:
  models.Error:
    properties:
      error:
        type: string
    type: object
  models.HostInfo:
    properties:
      host:
        type: string
      layer:
        type: integer
      pubKey:
        type: string
    required:
    - pubKey
    - host
    - layer
    type: object
  models.ObjectIDResponse:
    properties:
      id:
        type: string
    type: object
  models.ObjectRequest:
    properties:
      object:
        type: object
    type: object
  models.Presence:
    properties:
      host:
        type: string
      lastSeen:
        type: string
      layer:
        type: integer
      pubKey:
        type: string
    required:
    - layer
    - pubKey
    - lastSeen
    - host
    type: object
info:
  contact: {}
  description: This is a temporarily centralized directory/PKI/metrics API to allow
    us to get the other Nym node types running. Its functionality will eventually
    be folded into other parts of Nym.
  license:
    name: Apache 2.0
    url: https://github.com/nymtech/directory-server/license
  termsOfService: http://swagger.io/terms/
  title: Nym Directory API
  version: "1.0"
paths:
  /api/healthcheck:
    get:
      consumes:
      - application/json
      description: Returns a 200 if the directory server is available.
      operationId: healthCheck
      produces:
      - application/json
      responses:
        "200": {}
      summary: Lets lets the directory server tell the world it's alive
      tags:
      - healthcheck
  /api/metrics/mixes:
    get:
      consumes:
      - application/json
      description: You'd never want to run this in production, but for demo and debug
        purposes it gives us the ability to generate useful visualisations of network
        traffic.
      operationId: listMixMetrics
      parameters:
      - description: object
        in: body
        name: object
        required: true
        schema:
          $ref: '#/definitions/models.ObjectRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ObjectIDResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
            type: object
      summary: Lists mixnode activity in the past 1 second
      tags:
      - metrics
    post:
      consumes:
      - application/json
      description: You'd never want to run this in production, but for demo and debug
        purposes it gives us the ability to generate useful visualisations of network
        traffic.
      operationId: createMixMetric
      parameters:
      - description: object
        in: body
        name: object
        required: true
        schema:
          $ref: '#/definitions/models.ObjectRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ObjectIDResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
            type: object
      summary: Create a metric detailing how many messages a given mixnode sent
      tags:
      - metrics
  /api/nodes:
    post:
      consumes:
      - application/json
      description: Nodes should post their public key info to this method when they
        start.
      operationId: createObject
      parameters:
      - description: object
        in: body
        name: object
        required: true
        schema:
          $ref: '#/definitions/models.ObjectRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ObjectIDResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
            type: object
      summary: Create a node in the PKI
      tags:
      - pki
  /api/presence/mixnodes:
    get:
      consumes:
      - application/json
      description: Nym mixnodes periodically ping the directory server to register
        that they're alive. This method provides a list of mixnodes which have been
        most recently seen.
      operationId: mixNodesUp
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Presence'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
            type: object
      summary: Lists which Nym mixnodes are alive
      tags:
      - presence
    post:
      consumes:
      - application/json
      description: Nym mixnodes can ping this method to let the directory server know
        they're up. We can then use this info to create topologies of the overall
        Nym network.
      operationId: notifyMixNode
      parameters:
      - description: object
        in: body
        name: object
        required: true
        schema:
          $ref: '#/definitions/models.HostInfo'
          type: object
      produces:
      - application/json
      responses:
        "201": {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
            type: object
      summary: Lets a node tell the directory server it's alive
      tags:
      - presence
swagger: "2.0"
